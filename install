#!/bin/bash

#############
# FUNCTIONS #
#############

function apt_installation()
{
    sudo apt update
    sudo apt upgrade -y
    sudo apt install -y $(< ./lists/apt.list)
    # docker
    sudo apt-get remove docker docker-engine docker.io containerd runc
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
    echo \
    "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update
    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
}

function pacman_installation()
{
    sudo pacman -Syyu
    sudo pacman -Sy --needed $(< ./lists/pacman.list)
    # teams
    git clone https://aur.archlinux.org/teams.git
    cd teams
    makepkg -si
    cd ..
    rm -rf teams/
}

function zypper_installation()
{
    sudo zypper ref
    sudo zypper update
    sudo zypper install -y $(< ./lists/zypper.list)
    # teams
    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo zypper ar https://packages.microsoft.com/yumrepos/ms-teams/ ms-teams
    sudo zypper refresh
    sudo zypper install -y teams
}

function brew_installation()
{
    brew update
    brew upgrade
    brew install $(< ./lists/brew.list)
}

# INSTALLATION LINES TAKEN FROM OFFICIAL FEDORA DUMP (ONLY EXTERNAL INSTALLATIONS)
function run_external_installation()
{
    # Criterion
    curl -sSL "https://github.com/Snaipe/Criterion/releases/download/v2.4.0/criterion-2.4.0-linux-x86_64.tar.xz" -o criterion-2.4.0.tar.xz
    tar xf criterion-2.4.0.tar.xz
    cp -r criterion-2.4.0/* /usr/local/
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usr-local.conf
    ldconfig
    rm -rf criterion-2.4.0.tar.xz criterion-2.4.0/

    # Sbt
    curl -sSL "https://github.com/sbt/sbt/releases/download/v1.3.13/sbt-1.3.13.tgz" | tar xz
    mv sbt /usr/local/share
    ln -s '/usr/local/share/sbt/bin/sbt' '/usr/local/bin'

    # Gradle
    wget https://services.gradle.org/distributions/gradle-7.2-bin.zip
    mkdir /opt/gradle && unzip -d /opt/gradle gradle-7.2-bin.zip && rm -f gradle-7.2-bin.zip
    echo 'export PATH=$PATH:/opt/gradle/gradle-7.2/bin' >> /etc/profile

    # Stack
    curl -sSL https://get.haskellstack.org/ | sh

    # CONFIG EMACS
    git clone https://github.com/Epitech/epitech-emacs.git
    cd epitech-emacs
    git checkout 278bb6a630e6474f99028a8ee1a5c763e943d9a3
    ./INSTALL.sh system
    cd .. && rm -rf epitech-emacs

    # CONFIG VIM
    git clone https://github.com/Epitech/vim-epitech.git
    cd vim-epitech
    git checkout ec936f2a49ca673901d56598e141932fd309ddac
    ./install.sh
    cd .. && rm -rf vim-epitech
}

function installation_manager() {
    echo "package manager found: $1!"
    if [[ $1 = "apt" ]]; then
        apt_installation
    elif [[ $1 = "dnf" ]]; then
        echo "Head over to https://github.com/Epitech/dump to install the dump."
    elif [[ $1 = "pacman" ]]; then
        pacman_installation
    elif [[ $1 = "zypper" ]]; then
        zypper_installation
    elif [[ $1 = "brew" ]]; then
        brew_installation
    fi
}

########
# CODE #
########

# Get package manager name
package_managers=("brew" "apt" "dnf" "pacman" "zypper")
has_found=0
package_manager_found=""
for element in "${package_managers[@]}"; do
    which "$element" &> /dev/null
    if [[ $? -eq 0 ]]; then
        has_found=1
        package_manager_found=$element
        break
    fi
done

# Run commands depending of the package manager
if [[ has_found -eq 1 ]]; then
    installation_manager $package_manager_found
    run_external_installation
else
    echo "I couldn't find any known package manager..."
fi
